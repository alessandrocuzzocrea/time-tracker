/* tslint:disable */
/* eslint-disable */
/**
 * TimeTracker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeEntry } from './TimeEntry';
import { TimeEntryFromJSON, TimeEntryFromJSONTyped, TimeEntryToJSON } from './TimeEntry';

/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {number}
   * @memberof Task
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  projectId?: number;
  /**
   *
   * @type {Array<TimeEntry>}
   * @memberof Task
   */
  timeEntries?: Array<TimeEntry> | null;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function TaskFromJSON(json: any): Task {
  return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    projectId: !exists(json, 'projectId') ? undefined : json['projectId'],
    timeEntries: !exists(json, 'timeEntries')
      ? undefined
      : json['timeEntries'] === null
      ? null
      : (json['timeEntries'] as Array<any>).map(TimeEntryFromJSON),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt'])
  };
}

export function TaskToJSON(value?: Task | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    projectId: value.projectId,
    timeEntries:
      value.timeEntries === undefined
        ? undefined
        : value.timeEntries === null
        ? null
        : (value.timeEntries as Array<any>).map(TimeEntryToJSON),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString()
  };
}
