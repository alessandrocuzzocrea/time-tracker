/* tslint:disable */
/* eslint-disable */
/**
 * TimeTracker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationUser } from './ApplicationUser';
import {
  ApplicationUserFromJSON,
  ApplicationUserFromJSONTyped,
  ApplicationUserToJSON
} from './ApplicationUser';
import type { Task } from './Task';
import { TaskFromJSON, TaskFromJSONTyped, TaskToJSON } from './Task';

/**
 *
 * @export
 * @interface TimeEntry
 */
export interface TimeEntry {
  /**
   *
   * @type {number}
   * @memberof TimeEntry
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof TimeEntry
   */
  taskId?: number;
  /**
   *
   * @type {number}
   * @memberof TimeEntry
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof TimeEntry
   */
  description?: string | null;
  /**
   *
   * @type {Date}
   * @memberof TimeEntry
   */
  startTime?: Date;
  /**
   *
   * @type {Date}
   * @memberof TimeEntry
   */
  endTime?: Date | null;
  /**
   *
   * @type {Task}
   * @memberof TimeEntry
   */
  task?: Task;
  /**
   *
   * @type {ApplicationUser}
   * @memberof TimeEntry
   */
  user?: ApplicationUser;
  /**
   *
   * @type {Date}
   * @memberof TimeEntry
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof TimeEntry
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the TimeEntry interface.
 */
export function instanceOfTimeEntry(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function TimeEntryFromJSON(json: any): TimeEntry {
  return TimeEntryFromJSONTyped(json, false);
}

export function TimeEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimeEntry {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    taskId: !exists(json, 'taskId') ? undefined : json['taskId'],
    userId: !exists(json, 'userId') ? undefined : json['userId'],
    description: !exists(json, 'description') ? undefined : json['description'],
    startTime: !exists(json, 'startTime') ? undefined : new Date(json['startTime']),
    endTime: !exists(json, 'endTime')
      ? undefined
      : json['endTime'] === null
      ? null
      : new Date(json['endTime']),
    task: !exists(json, 'task') ? undefined : TaskFromJSON(json['task']),
    user: !exists(json, 'user') ? undefined : ApplicationUserFromJSON(json['user']),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt'])
  };
}

export function TimeEntryToJSON(value?: TimeEntry | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    taskId: value.taskId,
    userId: value.userId,
    description: value.description,
    startTime: value.startTime === undefined ? undefined : value.startTime.toISOString(),
    endTime:
      value.endTime === undefined
        ? undefined
        : value.endTime === null
        ? null
        : value.endTime.toISOString(),
    task: TaskToJSON(value.task),
    user: ApplicationUserToJSON(value.user),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString()
  };
}
